name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-sonar:
    name: Build ‚Ä¢ Test ‚Ä¢ Checkstyle ‚Ä¢ Coverage ‚Ä¢ Sonar (QG)
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        java: [ '17', '21' ]

    env:
      MAVEN_OPTS: -Xmx2g
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
      SONAR_HOST_URL: https://sonarcloud.io
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   

      CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # bitno za Sonar (history, blame)

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # üîß Normalizuj mvnw (LF + exec) ‚Äì ostaje iako exec bit treba da je u gitu
      - name: Prepare Maven Wrapper
        shell: bash
        run: |
          set -euo pipefail
          test -f mvnw || { echo "::error::mvnw not found at repo root"; ls -la; exit 1; }
          sed -i 's/\r$//' mvnw
          chmod +x mvnw
          head -n 1 mvnw || true
          ls -la mvnw || true
          git ls-files -s mvnw || true

      # ‚úÖ Obavezna provera da postoje wrapper fajlovi (properties + jar)
      - name: Validate Maven Wrapper files
        shell: bash
        run: |
          set -euo pipefail
          test -f .mvn/wrapper/maven-wrapper.properties || { echo "::error::.mvn/wrapper/maven-wrapper.properties missing"; exit 1; }
          test -f .mvn/wrapper/maven-wrapper.jar || { echo "::error::.mvn/wrapper/maven-wrapper.jar missing"; exit 1; }

      - name: Tool versions (wrapper)
        shell: bash
        run: |
          java -version
          bash ./mvnw -v
          

      # ‚öôÔ∏è Build + test + checkstyle + IT + coverage
      - name: Maven Verify (Checkstyle + Tests + IT + Coverage)
        shell: bash
        run: |
          bash ./mvnw -B -ntp -DskipITs=false verify

      # üîç SonarCloud (samo ako postoji secret i nije fork PR)
      - name: SonarCloud Analysis (wait for Quality Gate)
        if: ${{ secrets.SONAR_TOKEN != '' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          bash ./mvnw -B -ntp org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.qualitygate.wait=true

      - name: Skipped Sonar (no token or fork PR)
        if: ${{ !(secrets.SONAR_TOKEN != '' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)) }}
        run: echo "Skipping SonarCloud (no SONAR_TOKEN or fork PR)."

      # üì¶ Uvek uploduj izvestaje (i kad build padne)
      - name: Upload test & checkstyle reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-java-${{ matrix.java }}
          path: |
            **/target/surefire-reports/**
            **/target/failsafe-reports/**
            **/target/checkstyle-result.xml
            **/target/site/jacoco/**
